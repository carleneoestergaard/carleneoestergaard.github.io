(self.webpackChunkinviso=self.webpackChunkinviso||[]).push([[2290],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),y=s(r),f=o,d=y["".concat(p,".").concat(f)]||y[f]||u[f]||l;return r?n.createElement(d,a(a({ref:t},c),{},{components:r})):n.createElement(d,a({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<l;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},570:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var n=r(2122),o=r(9756),l=(r(7294),r(3905)),a=["components"],i={sidebar_position:3},p={unversionedId:"AlteryxAPI/frompython",id:"AlteryxAPI/frompython",isDocsHomePage:!1,title:"API from Python",description:"How to execute Alteryx workflows with Python",source:"@site/docs/AlteryxAPI/frompython.md",sourceDirName:"AlteryxAPI",slug:"/AlteryxAPI/frompython",permalink:"/build/docs/AlteryxAPI/frompython",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/AlteryxAPI/frompython.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Permissions",permalink:"/build/docs/AlteryxAPI/permissions"},next:{title:"API from Powershell",permalink:"/build/docs/AlteryxAPI/frompowershell"}},s=[{value:"How to execute Alteryx workflows with Python",id:"how-to-execute-alteryx-workflows-with-python",children:[]}],c={toc:s};function u(e){var t=e.components,r=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"how-to-execute-alteryx-workflows-with-python"},"How to execute Alteryx workflows with Python"),(0,l.kt)("p",null,"Note, the code used in this example is modified fromTheamazingdp.This should work on you Mac (or a linux environment) with python3 installed. Check if that's the case:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"python3 --version\n")),(0,l.kt)("p",null,"This should return something like:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Python 3.6.0")),(0,l.kt)("p",null,'To execute an Alteryx workflow with Python, we need to have 2 dependencies installed. First, the "Requests" library (to make API calls) and a custom script that is used to create a simple wrapper for these API calls ("AlteryxGalleryAPI").'),(0,l.kt)("p",null,"To install the requests library:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"pip3 install requests\n")),(0,l.kt)("p",null,'And to install the AlteryxGalleryAPI script, you can either download the repository here, or execute the following python script (Note that we want to have the github repo downloaded in a folder called "AlteryxGalleryAPI", which is located in the same folder as where we will place our Python scripts.)'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from urllib.request\nimport urlopen from zipfile\nimport ZipFile\nimport os\n\n\nurl = 'https://github.com/Lindsen13/AlteryxGalleryAPI/archive/master.zip'\npayload = urlopen(url)\n\ntempzip = open(\"tempfile.zip\", \"wb\")\ntempzip.write(payload.read())\ntempzip.close()\n\nzf = ZipFile(\"tempfile.zip\")\nzf.extractall()\nzf.close()\n\nos.rename('AlteryxGalleryAPI-master', 'AlteryxGalleryAPI')\n\n")),(0,l.kt)("p",null,'Executing the above script can be done by saving it as "install.py", and run:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"python3 install.py\n")),(0,l.kt)("p",null,'This should create a folder called "AlteryxGalleryAPI". Now we have everything to make our calls to the Alteryx Gallery:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from AlteryxGalleryAPI import AlteryxGalleryAPI\n\nclient_key = 'YOUR_CLIENT_KEY'\nclient_secret = 'YOUR_SECRET_KEY'\ngallery_url = 'YOUR_GALLERY_URL' #'https://alteryx.inviso.dk/gallery/api/v1' \nappID = 'YOU_APP_ID' #'5fbb794671285113d42fcc9f'\n\ncon = AlteryxGalleryAPI.Gallery(gallery_url, client_key, client_secret)\noutput = con.execute_workflow(appID)\n\nif output[0].status_code == 200: \n    print(f\"workflow executed correctly at {output[1].get('createDate')}\")\n    job_result = con.get_job_status(job_id=output[1].get('id'))\n    print(job_result)\n    \n")),(0,l.kt)("p",null,"With this, you've executed a workflow, and afterwards fetched its results!"))}u.isMDXComponent=!0}}]);